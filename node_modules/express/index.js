'use strict';

module.exports = require('./lib/express');
module.exports.currUser = req.user;
var multer = require('multer');///////////////////////////////////////////////////////////////////////////
var path = require('path');/////////////////////////////////////////////////////////////////////////
var crypto = require('crypto');//////////////////////////////////////////////////////////////////////////////
var GridFsStorage = require('multer-gridfs-storage');/////////////////////////////////////////////////////////////////////////
var Grid = require('gridfs-stream');/////////////////////////////////////////////////////////////////////////
var methodOverride = require('method-override');/////////////////////////////////////////////////////////////////////////
var express = require("express");
var bodyParser  = require("body-parser");
var mongoose = require("mongoose");
var passport = require("passport");
var localStrategy = require("passport-local");
var flash = require('connect-flash');
var user = require("./models/user");

var app = express();
const port = 3000;

app.use(methodOverride('_method'));
app.use(express.static("public"));
app.use(bodyParser.urlencoded({extended : true}));
app.use(express.static(__dirname + "/public"));
/////////////////////////////////////////////////////////////////////////
const mongoURI = "mongodb://localhost/robotwit";
const conn = mongoose.connect(mongoURI);
/////////////////////////////////////////////////////////////////////////
app.set("view engine", "ejs");
app.use(flash());
//////////////////////////////////////////////////////////////////
let gfs;

/*conn.once('open', () => {
  // Init stream
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection('uploads');
});*/

// Create storage engine
const storage = new GridFsStorage({
  url: mongoURI,
	username: String,
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
					username: "bazooz",
          bucketName: 'uploads'
        };
        resolve(fileInfo);
      });
    });
  }
});
const upload = multer({ storage });
/////////////////////////////////////////////////////////////////////////
//passport config
app.use(require("express-session")({
	secret: "There must be some kind of a way outta here....said the joker to the thief",
	resave: false,
	saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(new localStrategy(user.authenticate()));
passport.serializeUser(user.serializeUser());
passport.deserializeUser(user.deserializeUser());


//send currentUser and flash status to each page
 app.use((req,res,next)=>{

 	res.locals.currentUser = req.user;
 	res.locals.success = req.flash('success');
   	res.locals.error = req.flash('error');
 	next();
 });

var routes = require('./routes/routes.js');
app.use("",routes);
/////////////////////////////////////////////////////////////////////////
app.post('/changeAccSettings', upload.single('file'), (req, res) => {
  // res.json({ file: req.file });
  res.redirect('/');
});
/////////////////////////////////////////////////////////////////////////

app.listen(port, ()=> {
	console.log(`A server is listening to you! \nPort: ${port}`);
});
